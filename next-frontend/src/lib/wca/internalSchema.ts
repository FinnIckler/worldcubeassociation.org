/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/{personId}/results/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get competition results for a person */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    personId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Successful response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["PersonResultsResponse"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        Person: {
            /** @example 267 */
            id: number;
            /** @example Tim Reynolds */
            name: string;
            /** @example 2005REYN01 */
            wca_id: string;
            /** @example US */
            country_iso2: string;
            /**
             * Format: uri
             * @example https://www.worldcubeassociation.org/persons/2005REYN01
             */
            url: string;
        };
        Rank: {
            id: number;
            personId: string;
            eventId: string;
            best: number;
            worldRank: number;
            continentRank: number;
            countryRank: number;
        };
        Medals: {
            gold: number;
            silver: number;
            bronze: number;
            total: number;
        };
        Records: {
            national: number;
            continental: number;
            world: number;
            total: number;
        };
        Result: {
            id: number;
            pos: number;
            best: number;
            average: number;
            name: string;
            country_iso2: string;
            competition_id: string;
            event_id: string;
            round_type_id: string;
            format_id: string;
            wca_id: string;
            attempts: number[];
            best_index: number;
            worst_index: number;
            regional_single_record: string | null;
            regional_average_record: string | null;
        };
        PersonResultsResponse: {
            person: components["schemas"]["Person"];
            previous_persons: Record<string, never>[];
            ranks_single: components["schemas"]["Rank"][];
            ranks_average: components["schemas"]["Rank"][];
            medals: components["schemas"]["Medals"];
            records: components["schemas"]["Records"];
            championship_podiums: {
                world?: Record<string, never>[];
                continental?: Record<string, never>[];
                greater_china?: Record<string, never>[];
                national?: Record<string, never>[];
            };
            results: components["schemas"]["Result"][];
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export type operations = Record<string, never>;
